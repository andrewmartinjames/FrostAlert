#ifndef _CERTIFICATES_H_
#define _CERTIFICATES_H_

#ifdef __cplusplus
extern "C"
{
#endif

/* This file is auto-generated by the pycert_bearssl tool.  Do not change it manually.
 * Certificates are BearSSL br_x509_trust_anchor format.  Included certs:
 *
 * Index:    0
 * Label:    GlobalSign
 * Subject:  CN=GlobalSign,O=GlobalSign,OU=GlobalSign ECC Root CA - R4
 *
 * Index:    1
 * Label:    GTS LTSR
 * Subject:  CN=GTS LTSR,O=Google Trust Services LLC,C=US
 */

#define TAs_NUM 2

static const unsigned char TA_DN0[] = {
    0x30, 0x50, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13,
    0x1b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x20,
    0x45, 0x43, 0x43, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x41, 0x20,
    0x2d, 0x20, 0x52, 0x34, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04,
    0x0a, 0x13, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67,
    0x6e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0a,
    0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e,
};

static const unsigned char TA_EC_CURVE0[] = {
    0x04, 0xb8, 0xc6, 0x79, 0xd3, 0x8f, 0x6c, 0x25, 0x0e, 0x9f, 0x2e, 0x39,
    0x19, 0x1c, 0x03, 0xa4, 0xae, 0x9a, 0xe5, 0x39, 0x07, 0x09, 0x16, 0xca,
    0x63, 0xb1, 0xb9, 0x86, 0xf8, 0x8a, 0x57, 0xc1, 0x57, 0xce, 0x42, 0xfa,
    0x73, 0xa1, 0xf7, 0x65, 0x42, 0xff, 0x1e, 0xc1, 0x00, 0xb2, 0x6e, 0x73,
    0x0e, 0xff, 0xc7, 0x21, 0xe5, 0x18, 0xa4, 0xaa, 0xd9, 0x71, 0x3f, 0xa8,
    0xd4, 0xb9, 0xce, 0x8c, 0x1d,
};

static const unsigned char TA_DN1[] = {
    0x30, 0x44, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
    0x02, 0x55, 0x53, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x0a,
    0x13, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x54, 0x72, 0x75,
    0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
    0x4c, 0x4c, 0x43, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x03,
    0x13, 0x08, 0x47, 0x54, 0x53, 0x20, 0x4c, 0x54, 0x53, 0x52,
};

static const unsigned char TA_EC_CURVE1[] = {
    0x04, 0xcd, 0xf1, 0x8c, 0x8e, 0xda, 0xef, 0xb2, 0x09, 0x0a, 0x19, 0x77,
    0x00, 0x24, 0x50, 0xdb, 0xf9, 0x73, 0x77, 0x68, 0x91, 0xf5, 0x0b, 0x7e,
    0xb0, 0x3a, 0x40, 0x98, 0x05, 0x57, 0x65, 0xcc, 0xb8, 0x43, 0x6d, 0x41,
    0x92, 0x06, 0xe4, 0x75, 0x0e, 0x4b, 0xa8, 0xc5, 0x9f, 0xc7, 0xf4, 0xc9,
    0x29, 0x55, 0x78, 0xe4, 0x42, 0xc6, 0xa1, 0x72, 0x8c, 0x32, 0x72, 0x46,
    0x7f, 0x3a, 0x77, 0xe2, 0x24,
};

static const br_x509_trust_anchor TAs[] = {
    {
        { (unsigned char *)TA_DN0, sizeof TA_DN0 },
        BR_X509_TA_CA,
        {
            BR_KEYTYPE_EC,
            { .ec = {BR_EC_secp256r1, (unsigned char *)TA_EC_CURVE0, sizeof TA_EC_CURVE0}
        }
        }
    },
    {
        { (unsigned char *)TA_DN1, sizeof TA_DN1 },
        BR_X509_TA_CA,
        {
            BR_KEYTYPE_EC,
            { .ec = {BR_EC_secp256r1, (unsigned char *)TA_EC_CURVE1, sizeof TA_EC_CURVE1}
        }
        }
    },
};

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* ifndef _CERTIFICATES_H_ */
